from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import Message
from load import dp, bot
from aiogram import types 
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import logging
from keyboard import*
from database import Database
import datetime
from main import*
import asyncio
from config import admin
from datetime import datetime
from traits import *
import time
from traits import*
from config import*
import os


User_admin_mapping = {} # {admin_message_id: user_id}

btn = Button()

class Chat(StatesGroup):
    waiting_for_message = State()



@dp.message_handler(state='*', commands='üîï –ë–∞—Å —Ç–∞—Ä—Ç—É')
@dp.message_handler(Text(equals='üîï –ë–∞—Å —Ç–∞—Ä—Ç—É', ignore_case=True), state='*')
async def cancell_handler(message: types.Message, state: FSMContext):
    """
    :param message: –ë–∞—Å—Ç–∞—Ä—Ç—ã–ª–¥—ã
    :param state: –¢–æ“õ—Ç–∞—Ç—É
    :return: finish
    """
    
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('–ë–∞—Å —Ç–∞—Ä—Ç—É!')
    
    await state.finish()
    await message.reply('–°—ñ–∑ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—Ç—ã“£—ã–∑.', reply_markup=btn.menu())

@dp.message_handler(state=Chat.waiting_for_message, content_types=types.ContentType.ANY)
async def handle_user_message(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if message.from_user.username:
        user_info = f"@{message.from_user.username}"
    else:
        user_info = f"{message.from_user.full_name}"

    
    print(user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.content_type == 'text':
        sent_message = await bot.send_message(
            chat_id=admin,
            text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:\n{message.text}",
            reply_markup=btn.contact_user_button(user_id)
        )
    elif message.content_type == 'photo':
        sent_message = await bot.send_photo(
            chat_id=admin,
            photo=message.photo[-1].file_id,
            caption=f"–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}",
            reply_markup=btn.contact_user_button(user_id)
        )
    elif message.content_type == 'document':
        sent_message = await bot.send_document(
            chat_id=admin,
            document=message.document.file_id,
            caption=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}",
            reply_markup=btn.contact_user_button(user_id)
        )
    else:
        # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        sent_message = await bot.send_message(
            chat_id=admin,
            text=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}: (—Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {message.content_type})",
            reply_markup=btn.contact_user_button(user_id)
        )
        await message.forward(admin)  # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ reply_markup

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ user_id
    User_admin_mapping[sent_message.message_id] = user_id

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    await state.finish()



    

