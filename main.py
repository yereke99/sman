#!/usr/bin/env python
# -*- coding: utf-8 -*-
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from load import bot, dp
from aiogram import types
from FormaAdmin import *
from keyboard import*
from database import*
from config import*
from Forma import*
import asyncio
from traits import*
import time
from FormaAdmin import*
from aiogram.types import InputMediaPhoto, InputMediaVideo
from ChatForma import User_admin_mapping
from ChatForma import *




generator = Generator()
btn = Button()
db = Database()

@dp.message_handler(commands=['start', 'go'])
async def start_handler(message: types.Message):
    print(message.from_user.id)
      
    from datetime import datetime
    #fileId = "AgACAgIAAxkBAANcZwwL-emYUtwEKC8tOLtMa93tOnMAAqfoMRtMEGBILbrCi2y-dy4BAAMCAAN5AAM2BA"

    #user_id = message.from_user.id
    #user_name = f"@{message.from_user.username}"
    #time_now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    #db.JustInsert(user_id, user_name, time_now)  
    
    await bot.send_message(
        message.from_user.id,
        text="""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FavPlaces! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞—Ç—å –±–∞–ª–ª—ã –¥–ª—è —Å–∫–∏–¥–æ—á–Ω–æ–π –∫–∞—Ä—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.""",
        parse_mode="Markdown",
        reply_markup=btn.menu()
    )


# üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–≤–µ–¥–µ–Ω–∏—è
@dp.message_handler(commands=['chat'])
@dp.message_handler(Text(equals="üîç –ß–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"), content_types=['text'])
async def handler(message: types.Message):
    
    await Chat.waiting_for_message.set()

    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.", reply_markup=types.ReplyKeyboardRemove())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message_handler()
async def handle_user_message(message: types.Message):
    user_id = message.from_user.id
    user_info = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(types.InlineKeyboardButton("–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", callback_data=f"contact_user:{user_id}"))
    
    await bot.send_message(admin2, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info}:\n{message.text}", reply_markup=keyboard)

    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è Inline-–∫–Ω–æ–ø–∫–∏
@dp.callback_query_handler(Text(startswith='contact_user:'))
async def process_contact_user_callback(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split(':')[1])
    admin_id = callback_query.from_user.id
    
    User_admin_mapping[admin_id] = user_id
    
    await bot.send_message(admin_id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")
    await bot.answer_callback_query(callback_query.id)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(lambda message: message.from_user.id == admin2)
async def handle_admin_message(message: types.Message):
    admin_id = message.from_user.id
    user_id = User_admin_mapping.get(admin_id)
    
    if user_id:
        await bot.send_message(user_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞:\n{message.text}")
    else:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º' –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞.")
