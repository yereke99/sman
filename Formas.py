from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types.message import Message
from load import dp, bot
from aiogram import types 
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
import logging
from keyboard import*
from database import Database
import datetime
from main import*
import asyncio
from config import admin, admin3
from datetime import datetime
from traits import *
import time
from traits import*
from config import*
import os
from aiogram.types import InputMediaPhoto, InputMediaVideo
from data import SHOES_DATA
from mongo import*



db = MongoDB()
btn = Button()



# Ensure the directory exists
os.makedirs('./pdf/', exist_ok=True)

class Forma(StatesGroup):
    s1 = State()  
    s2 = State()
    s3 = State() 
    s4 = State()
    s5 = State()
    s6 = State()
    s7 = State()


# –§—É–Ω–∫—Ü–∏—è —Ç–∞—É–∞—Ä–¥—ã –∂”ô–Ω–µ –æ–Ω—ã“£ ”©–ª—à–µ–º—ñ–Ω —Å”©–∑–¥—ñ–∫—Ç–µ–Ω –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É “Ø—à—ñ–Ω
def remove_item_from_inventory(code, size):
    for category, prices in SHOES_DATA.items():
        for price, products in prices.items():
            for product in products:
                if product["code"].lower() == code.lower():
                    if size in product["sizes"]:
                        product["sizes"].remove(size)
                        # –ï–≥–µ—Ä ”©–ª—à–µ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ –±–æ—Å –±–æ–ª—Å–∞, —Ç–∞—É–∞—Ä–¥—ã –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É
                        if not product["sizes"]:
                            products.remove(product)
                        return True
    return False


# –ë–∞“ì–∞–Ω—ã —Ç–∞–±—É —Ñ—É–Ω–∫—Ü–∏—è—Å—ã
def get_price_by_code(code):
    for category, prices in SHOES_DATA.items():
        for price, products in prices.items():
            for product in products:
                if product["code"].lower() == code.lower():
                    return price
    return None

# –§—É–Ω–∫—Ü–∏—è, –∫–æ–¥ –±–æ–π—ã–Ω—à–∞ –±–∞“ì–∞–Ω—ã —Ç–∞–±—É “Ø—à—ñ–Ω
def get_price_by_code_and_size(code, size):
    for category, prices in SHOES_DATA.items():
        for price, products in prices.items():
            for product in products:
                if product["code"].lower() == code.lower() and size in product["sizes"]:
                    return price
    return None

def get_sizes_by_code(code):
    for category, prices in SHOES_DATA.items():
        for price, products in prices.items():
            for product in products:
                if product["code"].lower() == code.lower():
                    return product["sizes"]
    return None

def find_product_by_code(code):
    for category, prices in SHOES_DATA.items():
        for price, products in prices.items():
            for product in products:
                if product["code"].lower() == code.lower():
                    return price, product["sizes"]
    return None, None


@dp.message_handler(state='*', commands='üîï –°–∞—Ç—ã–ø –∞–ª—É–¥—ã —Ç–æ“õ—Ç–∞—Ç—É')
@dp.message_handler(Text(equals='üîï –°–∞—Ç—ã–ø –∞–ª—É–¥—ã —Ç–æ“õ—Ç–∞—Ç—É', ignore_case=True), state='*')
async def cancell_handler(message: types.Message, state: FSMContext):
    """
    :param message: –ë–∞—Å—Ç–∞—Ä—Ç—ã–ª–¥—ã
    :param state: –¢–æ“õ—Ç–∞—Ç—É
    :return: finish
    """
    
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('–ë–∞—Å —Ç–∞—Ä—Ç—É!')
    
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–Ω–æ–ø–æ–∫
    await state.finish()
    await message.reply('–°—ñ–∑ —Ç–∞–ø—Å—ã—Ä—ã—Å—Ç–∞–Ω –±–∞—Å —Ç–∞—Ä—Ç—Ç—ã“£—ã–∑.', reply_markup=types.ReplyKeyboardRemove())
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫
    await message.reply("–¢–∞“£–¥–∞“£—ã–∑:", reply_markup=btn.menu())


@dp.message_handler(state=Forma.s1)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['type'] = message.text.strip()

    price, sizes = find_product_by_code(data['type'])
    
    if price and sizes:
        await Forma.next()
        await message.reply(f"–ë–∞“ì–∞—Å—ã: {price} KZT\n“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ ”©–ª—à–µ–º–¥–µ—Ä: {', '.join(map(str, sizes))}", reply_markup=btn.buy())
       
    else:
        await message.reply("–ë“±–ª –∫–æ–¥–ø–µ–Ω —Ç–∞—É–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã. @smanonline_bot –∫–∞–Ω–∞–ª–¥–∞–Ω –±–∞—Å“õ–∞ –∞—è“õ –∫–∏—ñ–º–¥–µ—Ä –∫”©—Ä—ñ“£—ñ–∑!", reply_markup=btn.menu())
        await state.finish()



# –ö“Ø–π Forma.s2 “Ø—à—ñ–Ω ”©“£–¥–µ—É—à—ñ —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(state=Forma.s2)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        code = data['type']
        available_sizes = get_sizes_by_code(code)

    if available_sizes:
        await Forma.next()

        # –ë–∞—Ç—ã—Ä–º–∞–ª–∞—Ä–º–µ–Ω –±—ñ—Ä–≥–µ ”©–ª—à–µ–º–¥–µ—Ä —Ç—ñ–∑—ñ–º—ñ–Ω –∂—ñ–±–µ—Ä—É
        await message.reply("“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ ”©–ª—à–µ–º–¥–µ—Ä–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=btn.size_keyboard(available_sizes))
        
    else:
        await message.reply("–ë“±–ª –∫–æ–¥–ø–µ–Ω —Ç–∞—É–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã. @smanonline_bot –∫–∞–Ω–∞–ª–¥–∞–Ω –±–∞—Å“õ–∞ –∞—è“õ –∫–∏—ñ–º–¥–µ—Ä –∫”©—Ä—ñ“£—ñ–∑!", reply_markup=btn.menu())
        await state.finish()



# –ö“Ø–π Forma.s3 “Ø—à—ñ–Ω ”©“£–¥–µ—É—à—ñ —Ñ—É–Ω–∫—Ü–∏—è
@dp.message_handler(state=Forma.s3)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        code = data.get('type')
        try:
            size = int(message.text)
            data['size'] = size
        except ValueError:
            await message.reply("”®–ª—à–µ–º–¥—ñ —Å–∞–Ω —Ç“Ø—Ä—ñ–Ω–¥–µ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑.")
            return
    
    # –ë–∞“ì–∞–Ω—ã —Ç–∞–±—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞ MongoDB
    price = db.get_price_by_code_and_size(code, size)
    
    if price:
        await Forma.next()
        await message.reply(f"–ë–∞“ì–∞—Å—ã: {price} KZT. –¢–∞–ø—Å—ã—Ä—ã—Å –±–µ—Ä–µ—Å—ñ–∑ –±–µ?", reply_markup=btn.approve())
    else:
        await message.reply("”®–∫—ñ–Ω—ñ—à–∫–µ –æ—Ä–∞–π, –±“±–ª ”©–ª—à–µ–º–¥–µ —Ç–∞—É–∞—Ä –∂–æ“õ, –±–∞—Å“õ–∞ ”©–ª—à–µ–º–¥–µ–≥—ñ –∞—è“õ –∫–∏—ñ–º–¥–µ—Ä–¥—ñ –∫”©—Ä—ñ“£—ñ–∑.", reply_markup=btn.menu())
        await state.finish()


@dp.message_handler(state=Forma.s4)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        code = data.get('type')
        size = data.get('size')
        data['approve'] = message.text
        data['price'] = db.get_price_by_code(code)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ü–µ–Ω—ã

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "‚úîÔ∏è –ò”ô" –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if data['approve'] == "‚úîÔ∏è –ò”ô":
        price = data['price']
        
        if price:
            await Forma.next()  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
            with open("/home/sman/photo/example.jpeg", 'rb') as photo:
                await bot.send_photo(
                    message.from_user.id,
                    photo=photo,
                    caption=f"–¢”©–ª–µ—É–≥–µ “õ–∞–∂–µ—Ç —Å–æ–º–∞: {price} KZT.\n–°—ñ–ª—Ç–µ–º–µ –∞—Ä“õ—ã–ª—ã —Ç”©–ª–µ–º –∂–∞—Å–∞“£—ã–∑ –∂”ô–Ω–µ pdf —á–µ–∫—Ç—ñ –ü–æ–¥–µ–ª–∏—Ç—Å—è –¥–µ–≥–µ–Ω —Ç“Ø–π–º–µ–Ω—ñ –±–∞—Å–∞ –æ—Ç—ã—Ä–∞ —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç“õ–∞ –∫–µ—Ä—ñ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑",
                    reply_markup=btn.payment(),
                )
        else:
            # –ï—Å–ª–∏ —Ü–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
            await message.reply("–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, –±“±–ª –∫–æ–¥–ø–µ–Ω –±–∞“ì–∞ —Ç–∞–±—ã–ª–º–∞–¥—ã.", reply_markup=types.ReplyKeyboardRemove())
            await state.finish()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª "‚úîÔ∏è –ò”ô"
    else:
        await message.reply("–¢–∞–ø—Å—ã—Ä—ã—Å –∞—è“õ—Ç–∞–ª–¥—ã.", reply_markup=btn.menu())
        await state.finish()



@dp.message_handler(lambda message: not (message.document and message.document.mime_type == 'application/pdf'), state=Forma.s2, content_types=types.ContentType.DOCUMENT)
async def pdf_validator(message: types.Message, state: FSMContext):
    await message.reply(".pdf —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—ã–º–µ–Ω –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!")
    await Forma.s4.set()

@dp.message_handler(state=Forma.s5, content_types=types.ContentType.DOCUMENT)
async def handler(message: types.Message, state: FSMContext):
    try:
        document = message.document

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        user_id = message.from_user.id
        timestamp = int(time.time())
        random_int = Generator.generate_random_int()
        file_name = f"{user_id}_{timestamp}_{random_int}.pdf"
        file_path = os.path.join('./pdf/', file_name)

        # –ó–∞–≥—Ä—É–∑–∫–∞ PDF-—Ñ–∞–π–ª–∞
        file_info = await bot.get_file(document.file_id)
        await bot.download_file(file_info.file_path, file_path)

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–∞
        pdf_reader = PDFReader(file_path)
        pdf_reader.open_pdf()
        result = pdf_reader.extract_specific_info()
        pdf_reader.close_pdf()

        async with state.proxy() as data:
            data['data'] = message.text
            data['pdf_result'] = result
            data['fileName'] = file_name

        expected_price = convert_currency_to_int(data['price'])
        actual_price = convert_currency_to_int(data['pdf_result'][2])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã
        if actual_price != expected_price:
            await bot.send_message(
                message.from_user.id,
                text="*–¢”©–ª–µ–Ω–µ—Ç—ñ–Ω —Å—É–º–º–∞ “õ–∞—Ç–µ!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                parse_mode="Markdown",
                reply_markup=btn.menu()
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å—É–º–º—ã
            for admin_id in [admin, admin2, admin3, admin4]:
                await bot.send_document(
                    admin_id,
                    document=document.file_id,
                    caption=(
                        f"‚ùå “ö–∞—Ç–µ —Ç”©–ª–µ–º.\n\n"
                        f"üîñ –¢–∞—É–∞—Ä –∫–æ–¥—ã: {data['type']}\n"
                        f"üìè ”®–ª—à–µ–º: {data['size']}\n"
                        f"üí∞ –ö“Ø—Ç—ñ–ª–µ—Ç—ñ–Ω —Å–æ–º–∞: {expected_price} KZT\n"
                        f"üí∏ –¢”©–ª–µ–Ω–≥–µ–Ω —Å–æ–º–∞: {actual_price} KZT\n\n"
                        "“ö“±–∂–∞—Ç—Ç–∞ “õ–∞—Ç–µ —Å–æ–º–∞ –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω."
                    ),
                    reply_markup=types.ReplyKeyboardRemove(),
                )
            await state.finish()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞
        if data['pdf_result'][4] not in ["–°–∞—Ç—É—à—ã–Ω—ã“£ –ñ–°–ù/–ë–°–ù 190540002794", "–ò–ò–ù/–ë–ò–ù –ø—Ä–æ–¥–∞–≤—Ü–∞ 190540002794"]:
            await bot.send_message(
                message.from_user.id,
                text="*–î“±—Ä—ã—Å –µ–º–µ—Å —Å—á–µ—Ç“õ–∞ —Ç”©–ª–µ–¥—ñ“£—ñ–∑!\n“ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑*",
                parse_mode="Markdown",
                reply_markup=btn.menu()
            )
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –ø—Ä–æ–¥–∞–≤—Ü–µ
            for admin_id in [admin, admin2, admin3, admin4]:
                await bot.send_document(
                    admin_id,
                    document=document.file_id,
                    caption=(
                        f"‚ùå “ö–∞—Ç–µ —Ç”©–ª–µ–º.\n\n"
                        f"üîñ –¢–∞—É–∞—Ä –∫–æ–¥—ã: {data['type']}\n"
                        f"üìè ”®–ª—à–µ–º: {data['size']}\n"
                        f"üí∞ –°–æ–º–∞: {expected_price} KZT\n\n"
                        "“ö“±–∂–∞—Ç—Ç–∞“ì—ã —Å–∞—Ç—É—à—ã–Ω—ã“£ –¥–µ—Ä–µ–∫—Ç–µ—Ä—ñ –¥“±—Ä—ã—Å –µ–º–µ—Å."
                    ),
                    reply_markup=types.ReplyKeyboardRemove()
                )
            await state.finish()
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
        if db.remove_item_from_inventory(data['type'], data['size']):
            await Forma.next()
            await bot.send_message(
                message.from_user.id,
                text="*–°—ñ–∑–±–µ–Ω –∫–µ—Ä—ñ üì≤ –±–∞–π–ª–∞–Ω—ã—Å“õ–∞ —à—ã“ì—É “Ø—à—ñ–Ω –±–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ“£—ñ–∑–¥—ñ “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑! –¢”©–º–µ–Ω–¥–µ —Ç“±—Ä“ì–∞–Ω \n\nüì± –ö–æ–Ω—Ç–∞–∫—Ç—ñ–º–µ–Ω –±”©–ª—ñ—Å—É –∫–Ω–æ–ø–∫–∞—Å—ã–Ω –±–∞—Å—ã–Ω—ã–∑\n\n–ï–®“ö–ê–®–ê–ù –°–ê–ù–î–ê–†–ú–ï–ù –ñ–ê–ó–ë–ê–ô–ú–´–ó ‚ÄºÔ∏è*",
                parse_mode="Markdown",
                reply_markup=btn.send_contact()
            )
        else:
            await bot.send_message(
                message.from_user.id,
                text="*–°–∞—Ç—ã–ø –∞–ª—ã–Ω“ì–∞–Ω —Ç–∞—É–∞—Ä–¥—ã —Å”©–∑–¥—ñ–∫—Ç–µ–Ω –∞–ª—ã–ø —Ç–∞—Å—Ç–∞—É —Å”ô—Ç—Å—ñ–∑ –∞—è“õ—Ç–∞–ª–¥—ã, –º–µ–Ω–µ–¥–∂–µ—Ä–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞“£—ã–∑.*",
                parse_mode="Markdown",
                reply_markup=types.ReplyKeyboardRemove(),
                
            )
            await state.finish()

    except Exception as e:
        print(e)
        for admin_id in [admin, admin2, admin3, admin4]:
            await bot.send_message(
                admin_id,
                text=f"Error: {str(e)}",
            )
        await Forma.s2.set()
        await bot.send_message(
            message.from_user.id,
            text="–¢”©–ª–µ–º –∂–∞—Å–∞“ì–∞–Ω —Å–æ“£ —á–µ–∫—Ç—ñ üì≤ .pdf —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑!\n\n*–ù–ê–ó–ê–† –ê–£–î–ê–†–´“¢–´–ó –ß–ï–ö–¢–Ü –ú–û–î–ï–†–ê–¢–û–† –¢–ï–ö–°–ï–†–ï–î–Ü\n\n –ï–°–ö–ï–†–¢–£ ‚ùóÔ∏è\n–ñ–ê–õ“í–ê–ù –ß–ï–ö –ñ–Ü–ë–ï–†–£ –ù–ï–ú–ï–°–ï –ë–ê–°“ö–ê–î–ê –î“∞–†–´–° –ï–ú–ï–° –ß–ï–ö–¢–ï–† –ñ–Ü–ë–ï–†–£ –ê–í–¢–û–ú–ê–¢–¢–´ –¢“Æ–†–î–ï –°–ê–¢–´–ü –ê–õ–£–î–´“¢ –ö“Æ–®–Ü–ù –ñ–û–Ø–î–´*",
            parse_mode="Markdown",
            reply_markup=btn.cancels()
        )


@dp.message_handler(state=Forma.s6, content_types=types.ContentType.CONTACT)
async def handler(message: types.Message, state: FSMContext):
    await Forma.next()

    async with state.proxy() as data:
        data['contact'] = message.contact.phone_number

    # “ö–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ –∂—ã–ª—ã ”ô—Ä—ñ –¥–æ—Å—Ç—ã“õ —Ö–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—É
    await message.reply(
        "–ú–µ–∫–µ–Ω-–∂–∞–π—ã“£—ã–∑–¥—ã ‚úèÔ∏è –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )


@dp.message_handler(state=Forma.s7)
async def handler(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
        contact = data.get('contact')
        code = data.get('type')
        size = data.get('size')
        price = data.get('price')
        file_name = data.get('fileName')
        file_path = os.path.join('./pdf/', file_name)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(
        f"üéâ *–°–∞—Ç—ã–ø –∞–ª“ì–∞–Ω—ã“£—ã–∑ “Ø—à—ñ–Ω —Ä–∞“õ–º–µ—Ç!* üéâ\n\n"
        f"–°—ñ–∑ {code} –∫–æ–¥—ã–º–µ–Ω, {size} ”©–ª—à–µ–º–¥–µ–≥—ñ —Ç–∞—É–∞—Ä–¥—ã {price} KZT-“ì–∞ —Å–∞—Ç—ã–ø –∞–ª–¥—ã“£—ã–∑.\n"
        f"üìÑ –¢”©–ª–µ–º —Ä–∞—Å—Ç–∞–ª–¥—ã. –°—ñ–∑–¥—ñ“£ —á–µ–≥—ñ“£—ñ–∑: {file_name}\n\n"
        f"üë®‚Äçüíº *–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—ñ–∑–±–µ–Ω –∂–∞“õ—ã–Ω –∞—Ä–∞–¥–∞ –±–∞–π–ª–∞–Ω—ã—Å–∞–¥—ã.*\n"
        f"üìû “ö–æ—Å—ã–º—à–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä –±–æ–π—ã–Ω—à–∞ –±—ñ–∑–≥–µ —Ö–∞–±–∞—Ä–ª–∞—Å–∞ –∞–ª–∞—Å—ã–∑!\n\n"
        f"–°—ñ–∑–≥–µ –∂–∞“ì—ã–º–¥—ã –∫“Ø–Ω –∂”ô–Ω–µ —Å”ô—Ç—Ç—ñ–ª—ñ–∫ —Ç—ñ–ª–µ–π–º—ñ–∑! üòä",
        parse_mode="Markdown",
        reply_markup=types.ReplyKeyboardRemove()
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º —Å PDF-—Ñ–∞–π–ª–æ–º
    for admin_id in [admin, admin2, admin3, admin4]:
        try:
            await bot.send_document(
                admin_id,
                document=open(file_path, 'rb'),
                caption=(
                    f"‚úÖ *–ñ–∞“£–∞ —Ç–∞–ø—Å—ã—Ä—ã—Å —Ç”©–ª–µ–Ω–¥—ñ!*\n\n"
                    f"üîñ –¢–∞—É–∞—Ä –∫–æ–¥—ã: {code}\n"
                    f"üìè ”®–ª—à–µ–º: {size}\n"
                    f"üí∏ –¢”©–ª–µ–º —Å–æ–º–∞—Å—ã: {price} KZT\n"
                    f"üìû –ë–∞–π–ª–∞–Ω—ã—Å –Ω”©–º—ñ—Ä—ñ: {contact}\n"
                    f"üìç –ú–µ–∫–µ–Ω–∂–∞–π: {data['address']}\n\n"
                    "–¢–∞–ø—Å—ã—Ä—ã—Å —Å”ô—Ç—Ç—ñ “õ–∞–±—ã–ª–¥–∞–Ω–¥—ã, –æ–Ω—ã ”©“£–¥–µ—É–≥–µ –¥–∞–π—ã–Ω –±–æ–ª—ã“£—ã–∑."
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")

    await state.finish()
